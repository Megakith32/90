noStringConversion = \
	JS_Eval \
	JS_NewString

---

// Avoid types ending up in cnames.structs.* https://youtrack.jetbrains.com/issue/KT-49034

typedef struct JSContext {} JSContext;
typedef struct JSRuntime {} JSRuntime;

// Exposing non-constant macros per https://kotlinlang.org/docs/native-c-interop.html#macros

static inline int JsValueGetNormTag(JSValue v) {
  return JS_VALUE_GET_NORM_TAG(v);
}

static inline int JsValueGetInt(JSValue v) {
  return JS_VALUE_GET_INT(v);
}

static inline int JsValueGetBool(JSValue v) {
  return JS_VALUE_GET_BOOL(v);
}

static inline double JsValueGetFloat64(JSValue v) {
  return JS_VALUE_GET_FLOAT64(v);
}

static inline JSValue JsUndefined() {
  return JS_UNDEFINED;
}

static inline JSValue JsTrue() {
  return JS_TRUE;
}

static inline JSValue JsFalse() {
  return JS_FALSE;
}

// Things that could be written in Kotlin but were easier in C

static inline JSCFunctionListEntry JsCallFunction(void *func) {
  JSCFunctionListEntry entry = JS_CFUNC_DEF("call", 1, func);
  return entry;
}

static inline JSCFunctionListEntry JsDisconnectFunction(void *func) {
  JSCFunctionListEntry entry = JS_CFUNC_DEF("disconnect", 1, func);
  return entry;
}

static inline JSValue JsValueArrayToInstanceRef(JSValue* v, int i) {
  return v[i];
}
